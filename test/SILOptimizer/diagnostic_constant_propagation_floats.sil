// RUN: %target-sil-opt %s -diagnostic-constant-propagation -o /dev/null -verify
//
// Tests for checking floating-point diagnostics produced by constant
// propagation phase on SIL inputs. The diagnostics rely on AST information.
// This file tests to make sure that errors aren't emitted when AST information
// is not available.

sil_stage raw

import Builtin
import Swift

sil @testFPToInt8 : $@convention(thin) () -> Builtin.Int8 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0xC0068000000000000000 // -128
%1 = builtin "fptosi_FPIEEE80_Int8"(%0 : $Builtin.FPIEEE80) : $Builtin.Int8
%2 = float_literal $Builtin.FPIEEE80, 0xC0068100000000000000 // -129
%3 = builtin "fptosi_FPIEEE80_Int8"(%2 : $Builtin.FPIEEE80) : $Builtin.Int8 // expected-error {{invalid conversion: '-129' overflows 'Builtin.Int8'}}
return %1 : $Builtin.Int8
}

sil @testFPToUIntViaDouble : $@convention(thin) () -> UInt8 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0x4006FF00000000000000 // 255
%1 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%0 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64
%2 = struct $Double (%1 : $Builtin.FPIEEE64)
%3 = struct_extract %2 : $Double, #Double._value
%4 = builtin "fptoui_FPIEEE64_Int8"(%3 : $Builtin.FPIEEE64) : $Builtin.Int8
%5 = struct $UInt8 (%4 : $Builtin.Int8)
return %5 : $UInt8
}

sil @testFPToUInt8 : $@convention(thin) () -> Builtin.Int8 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0x40078000000000000000 // 256
%1 = builtin "fptoui_FPIEEE80_Int8"(%0 : $Builtin.FPIEEE80) : $Builtin.Int8 // expected-error {{invalid conversion: '256' overflows 'Builtin.Int8'}}
%2 = float_literal $Builtin.FPIEEE80, 0x80000000000000000000 // -0
%3 = builtin "fptoui_FPIEEE80_Int8"(%2 : $Builtin.FPIEEE80) : $Builtin.Int8
%4 = float_literal $Builtin.FPIEEE80, 0xC006C800000000000000 // -200
%5 = builtin "fptoui_FPIEEE80_Int8"(%4 : $Builtin.FPIEEE80) : $Builtin.Int8 // expected-error {{negative literal '-200' cannot be converted to unsigned 'Builtin.Int8'}}
return %5 : $Builtin.Int8
}

sil @testFPToInt16 : $@convention(thin) () -> Builtin.Int16 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0x400DFFFE000000000000 // 32767
%1 = builtin "fptosi_FPIEEE80_Int16"(%0 : $Builtin.FPIEEE80) : $Builtin.Int16
%2 = float_literal $Builtin.FPIEEE80, 0x400E8000000000000000 // 32768
%3 = builtin "fptosi_FPIEEE80_Int16"(%2 : $Builtin.FPIEEE80) : $Builtin.Int16 // expected-error {{invalid conversion: '32768' overflows 'Builtin.Int16'}}
%4 = float_literal $Builtin.FPIEEE80,  0xC00E9C40000000000000 // -4.0E+4
%5 = builtin "fptosi_FPIEEE80_Int16"(%4 : $Builtin.FPIEEE80) : $Builtin.Int16 // expected-error {{invalid conversion: '-4.0E+4' overflows 'Builtin.Int16'}}
return %1 : $Builtin.Int16
}

sil @testFPToUInt16 : $@convention(thin) () -> Builtin.Int16 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0x400EFFFF000000000000 // 65535
%1 = builtin "fptoui_FPIEEE80_Int16"(%0 : $Builtin.FPIEEE80) : $Builtin.Int16
%2 = float_literal $Builtin.FPIEEE80, 0x400F8000000000000000 // 65536
%3 = builtin "fptoui_FPIEEE80_Int16"(%2 : $Builtin.FPIEEE80) : $Builtin.Int16 // expected-error {{invalid conversion: '65536' overflows 'Builtin.Int16'}}
%4 = float_literal $Builtin.FPIEEE80, 0xC00F88B8000000000000 // -7.0E+4
%5 = builtin "fptoui_FPIEEE80_Int16"(%4 : $Builtin.FPIEEE80) : $Builtin.Int16 // expected-error {{negative literal '-7.0E+4' cannot be converted to unsigned 'Builtin.Int16'}}
return %1 : $Builtin.Int16
}

sil @testFPToInt32 : $@convention(thin) () -> Builtin.Int32 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0xC01E8000000000000000 // -2147483648
%1 = builtin "fptosi_FPIEEE80_Int32"(%0 : $Builtin.FPIEEE80) : $Builtin.Int32
%2 = float_literal $Builtin.FPIEEE80, 0xC01E8000000100000000 // -2147483649
%3 = builtin "fptosi_FPIEEE80_Int32"(%2 : $Builtin.FPIEEE80) : $Builtin.Int32 // expected-error {{invalid conversion: '-2147483649' overflows 'Builtin.Int32'}}
%4 = float_literal $Builtin.FPIEEE80, 0x401EB2D05E0000000000 // 3.0E+9
%5 = builtin "fptosi_FPIEEE80_Int32"(%4 : $Builtin.FPIEEE80) : $Builtin.Int32 // expected-error {{invalid conversion: '3.0E+9' overflows 'Builtin.Int32'}}
return %1 : $Builtin.Int32
}

sil @testFPToUInt32 : $@convention(thin) () -> Builtin.Int32 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0x401EFFFFFFFF00000000 // 4294967295
%1 = builtin "fptoui_FPIEEE80_Int32"(%0 : $Builtin.FPIEEE80) : $Builtin.Int32
%2 = float_literal $Builtin.FPIEEE80, 0x401F8000000000000000 // 4294967296
%3 = builtin "fptoui_FPIEEE80_Int32"(%2 : $Builtin.FPIEEE80) : $Builtin.Int32 // expected-error {{invalid conversion: '4294967296' overflows 'Builtin.Int32'}}
%4 = float_literal $Builtin.FPIEEE80,  0xC01F9502F90000000000 // -5.0E+9
%5 = builtin "fptoui_FPIEEE80_Int32"(%4 : $Builtin.FPIEEE80) : $Builtin.Int32 // expected-error {{negative literal '-5.0E+9' cannot be converted to unsigned 'Builtin.Int32'}}
return %1 : $Builtin.Int32
}

sil @testFPToInt64 : $@convention(thin) () -> Builtin.Int64 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0x403DFFFFFFFFFFFFFFFE // 9223372036854775807
%1 = builtin "fptosi_FPIEEE80_Int64"(%0 : $Builtin.FPIEEE80) : $Builtin.Int64
%2 = float_literal $Builtin.FPIEEE80, 0xC03E8000000000000000 // -9223372036854775808
%3 = builtin "fptosi_FPIEEE80_Int64"(%2 : $Builtin.FPIEEE80) : $Builtin.Int64
%4 = float_literal $Builtin.FPIEEE80, 0x403E8000000000000000 // 9223372036854775808
%5 = builtin "fptosi_FPIEEE80_Int64"(%4 : $Builtin.FPIEEE80) : $Builtin.Int64 // expected-error {{invalid conversion: '9223372036854775808' overflows 'Builtin.Int64'}}
return %1 : $Builtin.Int64
}

sil @testFPToUInt64 : $@convention(thin) () -> Builtin.Int64 {
bb0:
%0 = float_literal $Builtin.FPIEEE80, 0x403EFFFFFFFFFFFFFFFF // 18446744073709551615
%1 = builtin "fptoui_FPIEEE80_Int64"(%0 : $Builtin.FPIEEE80) : $Builtin.Int64
%2 = float_literal $Builtin.FPIEEE80, 0x403F8000000000000000 // 18446744073709551616
%3 = builtin "fptoui_FPIEEE80_Int64"(%2 : $Builtin.FPIEEE80) : $Builtin.Int64 // expected-error {{invalid conversion: '18446744073709551616' overflows 'Builtin.Int64'}}
%4 = float_literal $Builtin.FPIEEE80, 0xC03EFFFFFFFFFFFFFFFF // -18446744073709551615
%5 = builtin "fptoui_FPIEEE80_Int64"(%4 : $Builtin.FPIEEE80) : $Builtin.Int64 // expected-error {{negative literal '-18446744073709551615' cannot be converted to unsigned 'Builtin.Int64'}}
return %1 : $Builtin.Int64
}

sil @testFPToInt64ViaDouble : $@convention(thin) () -> Builtin.Int64 {
bb0:
// A case where implicit conversion of the float literal to double
// results in a unintuitive overflow during conversion to int
%0 = float_literal $Builtin.FPIEEE80, 0x403DFFFFFFFFFFFFFFFE // 9223372036854775807
%1 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%0 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64
%2 = struct $Double (%1 : $Builtin.FPIEEE64)
%3 = struct_extract %2 : $Double, #Double._value
%4 = builtin "fptosi_FPIEEE64_Int64"(%3 : $Builtin.FPIEEE64) : $Builtin.Int64 // expected-error {{invalid conversion: '9.2233720368547758E+18' overflows 'Builtin.Int64'}}
// Similarly for UInt
%5 = float_literal $Builtin.FPIEEE80, 0x403EFFFFFFFFFFFFFFFF // 18446744073709551615
%6 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%5 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64
%7 = struct $Double (%6 : $Builtin.FPIEEE64)
%8 = struct_extract %7 : $Double, #Double._value
%9 = builtin "fptoui_FPIEEE64_Int64"(%8 : $Builtin.FPIEEE64) : $Builtin.Int64 // expected-error {{invalid conversion: '1.8446744073709552E+19' overflows 'Builtin.Int64'}}
// A case where implicit conversion of the float literal to double
// elides an overflow during conversion to int that one would expect.
%10 = float_literal $Builtin.FPIEEE80,  0xC03E8000000000000001 // -9223372036854775809
%11 = builtin "fptrunc_FPIEEE80_FPIEEE64"(%10 : $Builtin.FPIEEE80) : $Builtin.FPIEEE64
%12 = struct $Double (%11 : $Builtin.FPIEEE64)
%13 = struct_extract %12 : $Double, #Double._value
%14 = builtin "fptosi_FPIEEE64_Int64"(%13 : $Builtin.FPIEEE64) : $Builtin.Int64
return %14 : $Builtin.Int64
}
